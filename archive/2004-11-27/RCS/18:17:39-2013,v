head	1.1;
access;
symbols;
locks
	alex:1.1; strict;
comment	@# @;


1.1
date	2004.11.27.18.17.39;	author alex;	state Exp;
branches;
next	;


desc
@Sat Nov 27 18:17:39 2004
@


1.1
log
@Initial revision
@
text
@# 6
use YAML;

sub bang {
   my $self = shift;
   $self->foo(0, [0,5,2,6]);
   $self->foo(1, [7, 6, 0]);
}
sub foo {
    my $self = shift;
    my $id = shift;
    my $arr = shift;
    if ($self->{bangs} % 2 == 0
#        or
#        ($self->{bangs} % 4 == 2 and rand() > 0.2)
       ) {
    $self->{"perms$id"} ||= perms(space => 16, things => scalar(@@$arr));
    unless($self->{"combo$id"} and @@{$self->{"combo$id"}}) {
       # 01234  760
       $self->{"combo$id"} = $self->render($id, $arr);
    }
    my $num = shift(@@{$self->{"combo$id"}});
    my $pan = int rand(2);
    $self->trigger({
                    sample => "latibro/$num",
                    gain => 200, ts => 100
                   }
                  );

    $self->code->[0] = "# $num";
    $self->modified;
    }
}

sub render {
    my $self = shift;
    my $result;
    my $id = shift;
    my $line = shift;
    my $perms = $self->{"perms$id"};
    my $point = ($self->sin(10) * @@$perms);
    my $runlengths = $perms->[$point];
    foreach my $c (0 .. @@$runlengths -1) {
        my $note = $line->[$c % @@$line];
        push(@@$result, ($note) x $runlengths->[$c]);
    }
    return($result);
}@
