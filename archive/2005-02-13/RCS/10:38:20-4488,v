head	1.7;
access;
symbols;
locks
	alex:1.7; strict;
comment	@# @;


1.7
date	2005.02.13.11.13.37;	author alex;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.13.11.12.22;	author alex;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.13.11.11.35;	author alex;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.13.11.05.04;	author alex;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.13.11.00.19;	author alex;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.13.10.57.09;	author alex;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.13.10.38.20;	author alex;	state Exp;
branches;
next	;


desc
@Sun Feb 13 10:38:20 2005
@


1.7
log
@Sun Feb 13 11:13:37 2005
@
text
@# hello 130.
# 21912

my $actors = [Thing->new, Shy->new, Foo->new, Bar->new];
my $stats;

sub init {
    my $self = shift;
    $self->{loop} = [];
    $self->{loopsize} = 32;
    $self->{actors} = $actors;
    $stats = $self->{stats} = {};
    $self->{init}++;
}

sub bang {
    my $self = shift;
    $self->init() unless $self->{init}; 
    foreach my $actor (@@$actors) {
        if ($actor->bang) {
            $self->t({sample => $actor->sample});
            $self->line(1, $self->{bangs});
        }
    }
    $self->line(0, "hello $self->{init}.");
    $self->modified;
}

package Thing;

sub new {
    my $package = shift;
    my $p = shift;
    $p ||= {};
    bless($p, $package);
}

sub bang {
    my $self = shift;
    my $result = 0;
    my $pkg = ref($self);
    my $kind = $stats->{$pkg};
    my $other = undef;
    while (my ($key, $value) = each(%$stats)) {
        if ($key ne $pkg) {
            if (not defined $other) {
                $other = $value;
            }
            elsif ($value < $other) {
                $other = $value;
            }
        }
    }
    if (((not defined $kind) or $kind >= $self->min_distance_from_kind)
        and
        ((not defined $other) or $other >= $self->min_distance_from_other)
       ) {
       $result = 1;
       $stats->{$pkg} = 1;
    }
    else {
        $stats->{$pkg}++;
    }
    return($result);
}

sub min_distance_from_kind {
    10;
}

sub min_distance_from_other {
    2;
}

sub sample {
    'drum/8'
}


package Shy;

use base qw/Thing/;

sub min_distance_from_kind {
    12;
}

sub min_distance_from_other {
    4;
}

sub sample {
    'drumtraks/2';
}

package Foo;

use base qw/Thing/;

sub min_distance_from_kind {
    8;
}

sub min_distance_from_other {
    4;
}

sub sample {
    'sid/3';
}

package Bar;

use base qw/Thing/;

sub min_distance_from_kind {
    16;
}

sub min_distance_from_other {
    6;
}

sub sample {
    'sid/4';
}

@


1.6
log
@Sun Feb 13 11:12:22 2005
@
text
@d2 1
a2 1
# 21210
d72 1
a72 1
    8;
@


1.5
log
@Sun Feb 13 11:11:35 2005
@
text
@d2 1
a2 1
# 20773
@


1.4
log
@Sun Feb 13 11:05:04 2005
@
text
@d2 1
a2 1
# 17126
d4 1
a4 1
my $actors = [Thing->new, Shy->new];
d68 1
a68 1
    6;
d72 1
a72 1
    4;
d85 5
a89 1
    6;
d100 28
@


1.3
log
@Sun Feb 13 11:00:19 2005
@
text
@d2 1
a2 1
# 14460
d41 17
a57 2
    my $kind = $stats->{ref($self)};
    if ((not defined $kind) or $kind >= $self->min_distance_from_kind) {
d59 1
a59 1
       $stats->{ref($self)} = 1;
d62 1
a62 1
        $stats->{ref($self)}++;
d68 5
a72 1
    2;
d92 3
@


1.2
log
@Sun Feb 13 10:57:09 2005
@
text
@d2 1
a2 1
# 12695
d4 1
a4 1
my $actors = [Thing->new];
d21 1
a21 1
            $self->t;
d53 5
a57 1
    4;
d68 6
@


1.1
log
@Initial revision
@
text
@d1 5
a5 1
# hello 1
d8 1
d11 2
a12 2
    $self->{actors} = [];
    $self->{stats} = {};
d18 12
a29 2
    init() unless $self->{init}; 
    
d31 32
a62 2
    $self->line(0, "hello $self->{init}");
    $self->modified;
@
