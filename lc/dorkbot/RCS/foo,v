head	1.22;
access;
symbols;
locks
	alex:1.22; strict;
comment	@# @;


1.22
date	2005.06.15.20.10.32;	author alex;	state Exp;
branches;
next	1.21;

1.21
date	2005.06.15.20.10.23;	author alex;	state Exp;
branches;
next	1.20;

1.20
date	2005.06.15.20.08.23;	author alex;	state Exp;
branches;
next	1.19;

1.19
date	2005.06.15.20.05.43;	author alex;	state Exp;
branches;
next	1.18;

1.18
date	2005.06.15.19.57.26;	author alex;	state Exp;
branches;
next	1.17;

1.17
date	2005.06.15.19.52.30;	author alex;	state Exp;
branches;
next	1.16;

1.16
date	2005.06.15.19.50.47;	author alex;	state Exp;
branches;
next	1.15;

1.15
date	2005.06.15.19.37.39;	author alex;	state Exp;
branches;
next	1.14;

1.14
date	2005.06.15.19.36.04;	author alex;	state Exp;
branches;
next	1.13;

1.13
date	2005.06.15.19.36.02;	author alex;	state Exp;
branches;
next	1.12;

1.12
date	2005.06.15.19.29.42;	author alex;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.15.19.29.27;	author alex;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.15.19.15.46;	author alex;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.15.19.14.34;	author alex;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.15.19.14.08;	author alex;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.15.19.10.58;	author alex;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.15.19.10.42;	author alex;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.15.19.09.45;	author alex;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.15.19.07.25;	author alex;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.15.19.01.06;	author alex;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.15.19.00.47;	author alex;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.15.18.52.34;	author alex;	state Exp;
branches;
next	;


desc
@Wed Jun 15 19:52:34 2005
@


1.22
log
@Wed Jun 15 21:10:32 2005
@
text
@# 1117617660 1118827260 1118335860
# 1118334782

my ($foo, $max, $min, $seq, $range, $size, %lookup);

sub init {
    my $self = shift;
    $self->{foo} ||= test();
    $foo = $self->{foo};
    #my $min = $foo->[0]->[0];
    $max = $foo->[-1]->[0];
    $min = ($max - (60 * 60 * 24 * 14));
    warn("size: " . scalar(@@$foo) . "\n");
    @@$seq = grep {$_->[0] > $min} @@$seq;
    warn("size now: " . scalar(@@$foo) . "\n");
    $range = $max - $min;
    warn("$min $max\n");
    $seq = [@@$foo];
    $size = 64;
}

use YAML;
sub bang {
    my $self = shift;

    if (not $foo) {
        $self->init();
    }

    if (($self->{bangs} % $size) == 0) {
        $seq = [@@$foo];
    }
    my $point = ($self->{bangs} % $size) / $size;
    my $now = $min + ($range * $point);
    $self->line(1, $seq->[0]->[0]);
    while (@@$seq && ($seq->[0]->[0] < $now)) {
        my $this = shift @@$seq;
        warn($this->[1]);
        if (not exists $lookup{$this->[1]}) {
           $lookup{$this->[1]} = new_sound();
        }
        warn(Dump $lookup{$this->[1]});
        $self->t($lookup{$this->[1]});
    }

    $self->line(0, "$min $max $now");
    $self->modified;
}

sub test {
    use LWP::Simple;
    use DateTime;
    open(FH, "</home/alex/Desktop/export");
    my $foo = join('', <FH>);
    my $result = {};
    while ($foo =~ /xmlUrl="([^\"]+)"/gs) {
       warn($1);
       my $remote = $1;
       my $data = get($remote);
       warn("data: $data\n");
       while ($data =~ m,<dc:date>([^<]+)</dc:date>,gs) {
           my $date = $1;
           my ($year, $month, $day, $hour, $minute, $second,
               $offsethour, $offsetmin) = 
              ($date =~ /(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)\+(\d+):(\d+)/);
           my $d;
           eval {
              $d = DateTime->new( year   => $year,
                                  month  => $month,
                                  day    => $day,
                                  hour   => $hour,
                                  minute => $minute,
                                  second => $second,
                                  time_zone => sprintf("+%02d%02d",
                                                       $offsethour, $offsetmin
                                                      )
                                );
           };
           next if $@@;
           push(@@{$result->{$remote}}, $d->epoch);
           warn("$d\n");
       }
    }
    my @@sorted;
    while (my ($key, $value) = each %$result) {
        foreach my $epoch (@@$value) {
            push @@sorted, [$epoch, $key];
        }
    }
    @@sorted = sort {$a->[0] <=> $b->[0]} @@sorted;
    return(\@@sorted);
}

sub new_sound {
  my @@sets = qw( gabba can sid diphone future bottle );
  my @@vowels = (qw(a e i o u), undef, undef, undef);
  return({sample => ($sets[rand @@sets] . '/' . int(rand(32))),
          speed  => (0.75 + rand(0.5)),
          pan    => (1 - rand(2)),
          vowel  => $vowels[rand @@vowels],
         }
        );
}@


1.21
log
@Wed Jun 15 21:10:23 2005
@
text
@d1 2
a2 2
# 1117617660 1118827260 1118109060
# 1118133060
@


1.20
log
@Wed Jun 15 21:08:23 2005
@
text
@d1 2
a2 2
# 1116288420 1118193606 1117211244.46875
# 1117518060
@


1.19
log
@Wed Jun 15 21:05:43 2005
@
text
@d4 1
d6 15
a21 12
my ($foo) = test();
#my $min = $foo->[0]->[0];
my $max = $foo->[-1]->[0];
my $min = ($max - (60 * 60 * 24 * 14));
warn("size: " . scalar(@@$foo) . "\n");
@@$seq = grep {$_->[0] > $min} @@$seq;
warn("size now: " . scalar(@@$foo) . "\n");
my $range = $max - $min;
warn("$min $max\n");
my $seq = [@@$foo];
my $size = 64;
my %lookup;
d26 3
a28 1

@


1.18
log
@Wed Jun 15 20:57:26 2005
@
text
@d3 3
d7 1
a7 1
my $min = $foo->[0]->[0];
d9 4
d21 3
d60 3
a62 1
           my $d = DateTime->new( year   => $year,
d72 2
@


1.17
log
@Wed Jun 15 20:52:30 2005
@
text
@d1 1
a1 1
# 1116288420 1118193606 1116645642.375
d43 1
a43 1
       my $data = get("http://use.perl.org/index.rss");
a62 1
       last;
@


1.16
log
@Wed Jun 15 20:50:47 2005
@
text
@d1 2
a2 2
# 1116288420 1118193606 1116615873.84375
# 1116590880
d22 3
a24 2
        if (not defined $lookup{$seq->[1]}) {
           $lookup{$seq->[1]} = new_sound();
d26 2
a27 2
        warn(Dump $lookup{$seq->[1]});
        $self->t($lookup{$seq->[1]});
@


1.15
log
@Wed Jun 15 20:37:39 2005
@
text
@d1 2
a2 2
# 1116288420 1118193606 1117895920.6875
# 1117906140
d77 1
a77 1
  return({sample => (rand($sets[rand @@sets])),
@


1.14
log
@Wed Jun 15 20:36:04 2005
@
text
@d1 2
a2 2
# 1116288420 1118193606 1117538698.3125
# 1117518060
d26 1
a26 1
        #$self->t($lookup);
d80 1
a80 1
          vowel  => vowels[rand @@vowels],
@


1.13
log
@Wed Jun 15 20:36:02 2005
@
text
@d1 1
a1 1
# 1116288420 1118193606 1116824253.5625
d82 1
@


1.12
log
@Wed Jun 15 20:29:42 2005
@
text
@d1 2
a2 1
# 1116288420 1118193606 1117925689.21875
d19 2
a20 2

    while (@@$seq && ($seq->[0]->[0] < $point)) {
d75 7
a81 1
  ["foo"]
@


1.11
log
@Wed Jun 15 20:29:27 2005
@
text
@d1 1
a1 1
# 1116288420 1118193606 1117836383.625
@


1.10
log
@Wed Jun 15 20:15:46 2005
@
text
@d1 1
d5 1
a5 1

d7 4
d13 17
a29 1
    
d71 4
@


1.9
log
@Wed Jun 15 20:14:34 2005
@
text
@d2 4
a5 1
warn($foo);
@


1.8
log
@Wed Jun 15 20:14:08 2005
@
text
@d1 2
a2 1
my ($foo, $min, $max) = test();
@


1.7
log
@Wed Jun 15 20:10:58 2005
@
text
@d1 1
a1 1
test();
d4 1
d38 8
a45 1
    return($result);
@


1.6
log
@Wed Jun 15 20:10:42 2005
@
text
@d37 1
@


1.5
log
@Wed Jun 15 20:09:45 2005
@
text
@d11 1
a11 1
    my $result;
d32 1
a32 1
           push(@@{$stuff{$remote}}, $d->epoch);
@


1.4
log
@Wed Jun 15 20:07:25 2005
@
text
@d11 1
d14 1
d28 3
a30 3
                                  timezone => sprintf("+%02d%02d",
                                                      $offsethour, $offsetmin
                                                     
d32 1
@


1.3
log
@Wed Jun 15 20:01:06 2005
@
text
@d8 1
d16 15
a30 1
           warn("$1\n");
@


1.2
log
@Wed Jun 15 20:00:47 2005
@
text
@d14 1
a14 1
       while ($data =~ m,<dc:date>([^<]+)</dc:date>,) {
@


1.1
log
@Initial revision
@
text
@d13 4
a16 1
       print "data: $data\n";
@
