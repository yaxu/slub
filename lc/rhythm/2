# 20.4.3!5+3
# O...O.O..O..O..OO...

use IO::File;
my $init = 0;

sub bang {
    my $self = shift;
    $self->openlog() unless $self->{logfh};
    init() unless $init;

    my $line = $self->line(1);
    return unless length $line;
    my $point = $self->{bangs} % length($line);
    my $chr = substr($line, $point, 1);
    if ($chr eq 'O') {
        $self->t({sample => "drumtraks/6"});
    }
}

sub openlog {
    my $self = shift;
    $self->{logfh} = IO::File->new('>>/yaxu/lc/rhythm/rhythm.log');
    $self->{logfh}->autoflush(1);
    print {$self->{logfh}} $self->{now} . ':' . $self->{bangs} . ": *start*\n";
}

sub init {
  my $string = $self->line(0);
  print {$self->{logfh}} $self->{now} . ':' . $self->{bangs} . ": $string";
  $string =~ s/^(\d+)//;
  my $length = $1;
  my $rhythm = ('.' x $length);

  while($string =~ /(\D+)(\d+)(?=\+(\d+))?/g) {
    my ($verb, $param, $offset) = ($1, $2, $3);
    $offset ||= 0;
    print("$verb / $param / $offset\n");
    if ($verb eq '.') {
      $param--;
      $rhythm =~ s/(?<=.{$offset})(.)(.{$param})/O$2/g;
    }
    elsif ($verb eq '!') {
      $param--;
      $rhythm =~ s/(?<=.{$offset})(.)(.{$param})/.$2/g;
    }
  }
  print {$self->{logfh}} " = $rhythm\n";
  $self->line(1, $rhythm);
  $self->modified;
  $init++;
}
